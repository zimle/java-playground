/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.2.1/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    // id("java-library")
    id("java")
    id("pmd")
    id("checkstyle")
    id("org.openrewrite.rewrite") version("6.1.24")
    id("com.diffplug.spotless") version("6.20.0")

}

rewrite {
    activeRecipe("org.openrewrite.staticanalysis.CodeCleanup")
    checkstyleConfigFile = project(":").file("config/checkstyle/google_checks.xml")
    exclusion("**/*gradle*")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    rewrite("org.openrewrite.recipe:rewrite-static-analysis:1.0.5")
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    // api("org.apache.commons:commons-math3:3.6.1")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:31.1-jre")

    implementation("org.slf4j:slf4j-api:2.0.9")
    implementation("ch.qos.logback:logback-classic:1.4.11") // backend for slf4j
    implementation("net.logstash.logback:logstash-logback-encoder:7.4") // used for appender that automatically log in json

    // lombok
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

    testCompileOnly("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
}

testing {
    suites{
        // Configure the built-in test suite
        test{
            // Use JUnit Jupiter test framework
            useJUnitJupiter("5.9.2")
        }
    }
}

spotless {
  format("misc", {
    // define the files to apply `misc` to
    target'*.gradle', '*.md', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(4) // or spaces. Takes an integer argument if you don't like 4
    endWithNewline()
  })
  java{
    removeUnusedImports()
    importOrder()
    cleanthat()
    palantirJavaFormat()
  }
}

checkstyle {
    configFile = project(":").file("config/checkstyle/google_checks.xml")
}

def rewriteRunTask = tasks.named("rewriteRun")

tasks.withType(Checkstyle) {
    dependsOn(rewriteRunTask)
}

pmd {
    toolVersion = "6.55.0"
    ignoreFailures = false
    consoleOutput = true
    ruleSetFiles = files("$rootDir/config/pmd/custom-rules.xml")
    ruleSets = [] // explicitly set to empty to avoid using the default configuration
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain{
        languageVersion = JavaLanguageVersion.of(17)
    }
}
